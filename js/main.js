/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ (function() {

eval("function Util() {};\r\nUtil.hasClass = function(el, className) {\r\n    if (el.classList) return el.classList.contains(className);\r\n    else return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\r\n};\r\nUtil.addClass = function(el, className) {\r\n    var classList = className.split(' ');\r\n    if (el.classList) el.classList.add(classList[0]);\r\n    else if (!Util.hasClass(el, classList[0])) el.className += \" \" + classList[0];\r\n    if (classList.length > 1) Util.addClass(el, classList.slice(1).join(' '));\r\n};\r\nUtil.removeClass = function(el, className) {\r\n    var classList = className.split(' ');\r\n    if (el.classList) el.classList.remove(classList[0]);\r\n    else if (Util.hasClass(el, classList[0])) {\r\n        var reg = new RegExp('(\\\\s|^)' + classList[0] + '(\\\\s|$)');\r\n        el.className = el.className.replace(reg, ' ');\r\n    }\r\n    if (classList.length > 1) Util.removeClass(el, classList.slice(1).join(' '));\r\n};\r\nUtil.toggleClass = function(el, className, bool) {\r\n    if (bool) Util.addClass(el, className);\r\n    else Util.removeClass(el, className);\r\n};\r\nUtil.setAttributes = function(el, attrs) {\r\n    for (var key in attrs) {\r\n        el.setAttribute(key, attrs[key]);\r\n    }\r\n};\r\nUtil.getChildrenByClassName = function(el, className) {\r\n    var children = el.children,\r\n        childrenByClass = [];\r\n    for (var i = 0; i < el.children.length; i++) {\r\n        if (Util.hasClass(el.children[i], className)) childrenByClass.push(el.children[i]);\r\n    }\r\n    return childrenByClass;\r\n};\r\nUtil.is = function(elem, selector) {\r\n    if (selector.nodeType) {\r\n        return elem === selector;\r\n    }\r\n    var qa = (typeof(selector) === 'string' ? document.querySelectorAll(selector) : selector),\r\n        length = qa.length,\r\n        returnArr = [];\r\n    while (length--) {\r\n        if (qa[length] === elem) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\nUtil.setHeight = function(start, to, element, duration, cb) {\r\n    var change = to - start,\r\n        currentTime = null;\r\n    var animateHeight = function(timestamp) {\r\n        if (!currentTime) currentTime = timestamp;\r\n        var progress = timestamp - currentTime;\r\n        var val = parseInt((progress / duration) * change + start);\r\n        element.style.height = val + \"px\";\r\n        if (progress < duration) {\r\n            window.requestAnimationFrame(animateHeight);\r\n        } else {\r\n            cb();\r\n        }\r\n    };\r\n    element.style.height = start + \"px\";\r\n    window.requestAnimationFrame(animateHeight);\r\n};\r\nUtil.scrollTo = function(final, duration, cb) {\r\n    var start = window.scrollY || document.documentElement.scrollTop,\r\n        currentTime = null;\r\n    var animateScroll = function(timestamp) {\r\n        if (!currentTime) currentTime = timestamp;\r\n        var progress = timestamp - currentTime;\r\n        if (progress > duration) progress = duration;\r\n        var val = Math.easeInOutQuad(progress, start, final - start, duration);\r\n        window.scrollTo(0, val);\r\n        if (progress < duration) {\r\n            window.requestAnimationFrame(animateScroll);\r\n        } else {\r\n            cb && cb();\r\n        }\r\n    };\r\n    window.requestAnimationFrame(animateScroll);\r\n};\r\nUtil.moveFocus = function(element) {\r\n    if (!element) element = document.getElementsByTagName(\"body\")[0];\r\n    element.focus();\r\n    if (document.activeElement !== element) {\r\n        element.setAttribute('tabindex', '-1');\r\n        element.focus();\r\n    }\r\n};\r\nUtil.getIndexInArray = function(array, el) {\r\n    return Array.prototype.indexOf.call(array, el);\r\n};\r\nUtil.cssSupports = function(property, value) {\r\n    if ('CSS' in window) {\r\n        return CSS.supports(property, value);\r\n    } else {\r\n        var jsProperty = property.replace(/-([a-z])/g, function(g) {\r\n            return g[1].toUpperCase();\r\n        });\r\n        return jsProperty in document.body.style;\r\n    }\r\n};\r\nUtil.extend = function() {\r\n    var extended = {};\r\n    var deep = false;\r\n    var i = 0;\r\n    var length = arguments.length;\r\n    if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\r\n        deep = arguments[0];\r\n        i++;\r\n    }\r\n    var merge = function(obj) {\r\n        for (var prop in obj) {\r\n            if (Object.prototype.hasOwnProperty.call(obj, prop)) {\r\n                if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\r\n                    extended[prop] = extend(true, extended[prop], obj[prop]);\r\n                } else {\r\n                    extended[prop] = obj[prop];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    for (; i < length; i++) {\r\n        var obj = arguments[i];\r\n        merge(obj);\r\n    }\r\n    return extended;\r\n};\r\nif (!Element.prototype.matches) {\r\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\r\n}\r\nif (!Element.prototype.closest) {\r\n    Element.prototype.closest = function(s) {\r\n        var el = this;\r\n        if (!document.documentElement.contains(el)) return null;\r\n        do {\r\n            if (el.matches(s)) return el;\r\n            el = el.parentElement || el.parentNode;\r\n        } while (el !== null && el.nodeType === 1);\r\n        return null;\r\n    };\r\n}\r\nif (typeof window.CustomEvent !== \"function\") {\r\n    function CustomEvent(event, params) {\r\n        params = params || {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: undefined\r\n        };\r\n        var evt = document.createEvent('CustomEvent');\r\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n        return evt;\r\n    }\r\n    CustomEvent.prototype = window.Event.prototype;\r\n    window.CustomEvent = CustomEvent;\r\n}\r\nMath.easeInOutQuad = function(t, b, c, d) {\r\n    t /= d / 2;\r\n    if (t < 1) return c / 2 * t * t + b;\r\n    t--;\r\n    return -c / 2 * (t * (t - 2) - 1) + b;\r\n};\r\n/**/\r\n(function() {\r\n    var LanguagePicker = function(element) {\r\n        this.element = element;\r\n        this.select = this.element.getElementsByTagName('select')[0];\r\n        this.options = this.select.getElementsByTagName('option');\r\n        this.selectedOption = getSelectedOptionText(this);\r\n        this.pickerId = this.select.getAttribute('id');\r\n        this.trigger = false;\r\n        this.dropdown = false;\r\n        this.firstLanguage = false;\r\n        // dropdown arrow inside the button element\r\n        this.svgPath = '<svg viewBox=\"0 0 16 16\"><polygon points=\"3,5 8,11 13,5 \"></polygon></svg>';\r\n        initLanguagePicker(this);\r\n        initLanguagePickerEvents(this);\r\n    };\r\n\r\n    function initLanguagePicker(picker) {\r\n        // create the HTML for the custom dropdown element\r\n        picker.element.insertAdjacentHTML('beforeend', initButtonPicker(picker) + initListPicker(picker));\r\n\r\n        // save picker elements\r\n        picker.dropdown = picker.element.getElementsByClassName('language-picker__dropdown')[0];\r\n        picker.firstLanguage = picker.dropdown.getElementsByClassName('language-picker__item')[0];\r\n        picker.trigger = picker.element.getElementsByClassName('language-picker__button')[0];\r\n    };\r\n\r\n    function initLanguagePickerEvents(picker) {\r\n        // make sure to add the icon class to the arrow dropdown inside the button element\r\n        Util.addClass(picker.trigger.getElementsByTagName('svg')[0], 'icon');\r\n        // language selection in dropdown\r\n        // ⚠️ Important: you need to modify this function in production\r\n        initLanguageSelection(picker);\r\n\r\n        // click events\r\n        picker.trigger.addEventListener('click', function() {\r\n            toggleLanguagePicker(picker, false);\r\n        });\r\n    };\r\n\r\n    function toggleLanguagePicker(picker, bool) {\r\n        var ariaExpanded;\r\n        if (bool) {\r\n            ariaExpanded = bool;\r\n        } else {\r\n            ariaExpanded = picker.trigger.getAttribute('aria-expanded') == 'true' ? 'false' : 'true';\r\n        }\r\n        picker.trigger.setAttribute('aria-expanded', ariaExpanded);\r\n        if (ariaExpanded == 'true') {\r\n            picker.firstLanguage.focus(); // fallback if transition is not supported\r\n            picker.dropdown.addEventListener('transitionend', function cb() {\r\n                picker.firstLanguage.focus();\r\n                picker.dropdown.removeEventListener('transitionend', cb);\r\n            });\r\n        }\r\n    };\r\n\r\n    function checkLanguagePickerClick(picker, target) { // if user clicks outside the language picker -> close it\r\n        if (!picker.element.contains(target)) toggleLanguagePicker(picker, 'false');\r\n    };\r\n\r\n    function moveFocusToPickerTrigger(picker) {\r\n        if (picker.trigger.getAttribute('aria-expanded') == 'false') return;\r\n        if (document.activeElement.closest('.language-picker__dropdown') == picker.dropdown) picker.trigger.focus();\r\n    };\r\n\r\n    function initButtonPicker(picker) { // create the button element -> picker trigger\r\n        // check if we need to add custom classes to the button trigger\r\n        var customClasses = picker.element.getAttribute('data-trigger-class') ? ' ' + picker.element.getAttribute('data-trigger-class') : '';\r\n\r\n        var button = '<button class=\"language-picker__button' + customClasses + '\" aria-label=\"' + picker.select.value + ' ' + picker.element.getElementsByTagName('label')[0].innerText + '\" aria-expanded=\"false\" aria-contols=\"' + picker.pickerId + '-dropdown\">';\r\n        button = button + '<span aria-hidden=\"true\" class=\"language-picker__label language-picker__flag language-picker__flag--' + picker.select.value + '\"><em>' + picker.selectedOption + '</em>';\r\n        button = button + picker.svgPath + '</span>';\r\n        return button + '</button>';\r\n    };\r\n\r\n    function initListPicker(picker) { // create language picker dropdown\r\n        var list = '<div class=\"language-picker__dropdown\" aria-describedby=\"' + picker.pickerId + '-description\" id=\"' + picker.pickerId + '-dropdown\">';\r\n        list = list + '<p class=\"sr-only\" id=\"' + picker.pickerId + '-description\">' + picker.element.getElementsByTagName('label')[0].innerText + '</p>';\r\n        list = list + '<ul class=\"language-picker__list\" role=\"listbox\">';\r\n        for (var i = 0; i < picker.options.length; i++) {\r\n            var selected = picker.options[i].hasAttribute('selected') ? ' aria-selected=\"true\"' : '',\r\n                language = picker.options[i].getAttribute('lang');\r\n            list = list + '<li><a lang=\"' + language + '\" hreflang=\"' + language + '\" href=\"' + getLanguageUrl(picker.options[i]) + '\"' + selected + ' role=\"option\" data-value=\"' + picker.options[i].value + '\" class=\"language-picker__item language-picker__flag language-picker__flag--' + picker.options[i].value + '\"><span>' + picker.options[i].text + '</span></a></li>';\r\n        };\r\n        return list;\r\n    };\r\n\r\n    function getSelectedOptionText(picker) { // used to initialize the label of the picker trigger button\r\n        var label = '';\r\n        if ('selectedIndex' in picker.select) {\r\n            label = picker.options[picker.select.selectedIndex].text;\r\n        } else {\r\n            label = picker.select.querySelector('option[selected]').text;\r\n        }\r\n        return label;\r\n    };\r\n\r\n    function getLanguageUrl(option) {\r\n        // ⚠️ Important: You should replace this return value with the real link to your website in the selected language\r\n        // option.value gives you the value of the language that you can use to create your real url (e.g, 'english' or 'italiano')\r\n        return '#';\r\n    };\r\n\r\n    function initLanguageSelection(picker) {\r\n        picker.element.getElementsByClassName('language-picker__list')[0].addEventListener('click', function(event) {\r\n            var language = event.target.closest('.language-picker__item');\r\n            if (!language) return;\r\n\r\n            if (language.hasAttribute('aria-selected') && language.getAttribute('aria-selected') == 'true') {\r\n                // selecting the same language\r\n                event.preventDefault();\r\n                picker.trigger.setAttribute('aria-expanded', 'false'); // hide dropdown\r\n            } else {\r\n                // ⚠️ Important: this 'else' code needs to be removed in production. \r\n                // The user has to be redirected to the new url -> nothing to do here\r\n                event.preventDefault();\r\n                picker.element.getElementsByClassName('language-picker__list')[0].querySelector('[aria-selected=\"true\"]').removeAttribute('aria-selected');\r\n                language.setAttribute('aria-selected', 'true');\r\n                picker.trigger.getElementsByClassName('language-picker__label')[0].setAttribute('class', 'language-picker__label language-picker__flag language-picker__flag--' + language.getAttribute('data-value'));\r\n                picker.trigger.getElementsByClassName('language-picker__label')[0].getElementsByTagName('em')[0].innerText = language.innerText;\r\n                picker.trigger.setAttribute('aria-expanded', 'false');\r\n            }\r\n        });\r\n    };\r\n\r\n    //initialize the LanguagePicker objects\r\n    var languagePicker = document.getElementsByClassName('js-language-picker');\r\n    if (languagePicker.length > 0) {\r\n        var pickerArray = [];\r\n        for (var i = 0; i < languagePicker.length; i++) {\r\n            (function(i) { pickerArray.push(new LanguagePicker(languagePicker[i])); })(i);\r\n        }\r\n\r\n        // listen for key events\r\n        window.addEventListener('keyup', function(event) {\r\n            if (event.keyCode && event.keyCode == 27 || event.key && event.key.toLowerCase() == 'escape') {\r\n                // close language picker on 'Esc'\r\n                pickerArray.forEach(function(element) {\r\n                    moveFocusToPickerTrigger(element); // if focus is within dropdown, move it to dropdown trigger\r\n                    toggleLanguagePicker(element, 'false'); // close dropdown\r\n                });\r\n            }\r\n        });\r\n        // close language picker when clicking outside it\r\n        window.addEventListener('click', function(event) {\r\n            pickerArray.forEach(function(element) {\r\n                checkLanguagePickerClick(element, event.target);\r\n            });\r\n        });\r\n    }\r\n}());\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//\n\n//# sourceURL=webpack://gulp-iuxeps/./src/js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/main.js"]();
/******/ 	
/******/ })()
;